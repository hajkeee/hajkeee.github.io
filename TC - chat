zapisujesz do returningUser przy każdym odświeżeniu strony aktualny esky_TCSIs a skrypt przy każdym odświeżeniu sprawdza zanim to nadpiszesz czy esky_TCSIs jest równy returningUser
1:27
to moje rozwiązanie, przemyślmy przypadki.
User wpada po raz pierwszy na stronę
Skrypt sprawdza czy returningUser nie jest null i czy równa się esky_TCSIs  Okazuje się, że `returningUser  jest null bo wcześniej nie było wizyty więc traktuje usera jako NOWY po czym skrypt kopiuje wartość esky_TCSIs  do returningUser
Użytkownik potem przechodzi na inną stronę ale w tej samej sesji i skrypt sprawdza czy returningUser nie jest null i czy równa się esky_TCSIs Okazuje się, że returningUser  = esky_TCSIs  więc user jest jako NOWY po czym skrypt kopiuje wartość esky_TCSIs  do returningUser  (czyli nadpisuje go taką samą wartością).
W tym przypadku wygląda na to, że podczas pierwszej sesji wszystko jest OK i user jest jako NOWY.

function () {
    var returningUserSessionKey = 'returningUserSession';
    var returningUserKey = 'returningUser';
    var returningUserSessionValue = 'esky_TCSIs';

    var storedSession = localStorage.getItem(returningUserSessionKey);
    var returningUser = localStorage.getItem(returningUserKey);

    if (!storedSession || storedSession === returningUserSessionValue) {

        localStorage.setItem(returningUserSessionKey, returningUserSessionValue); 
        localStorage.setItem(returningUserKey, false);
        console.log('New user');
        return 'new';
    } else {
     
        if (returningUser === null || returningUser === 'false') {
            // Jeśli użytkownik był wcześniej nowy i powrócił po jakimś czasie
            localStorage.setItem(returningUserKey, true); 
        }
        console.log('Returning user');
        return 'returning';
    }
}





1:30
User powraca na stronę po jakimś czasie
Zmienia mu się esky_TCSIs bo to ma lifetime jako Session.
Skrypt sprawdza czy returningUser nie jest null i czy równa się esky_TCSIs  Okazuje się, że `returningUser  nie jest null i że returningUser != esky_TCSIs  czyli jest POWRACAJĄCY.
Myślę, że dla tego przypadku należy tutaj zatrzymać skrypt by nie skopiował esky_TCSIs  do returningUser  (bo wtedy będzie znowu jako NOWY) a dzięki temu tego usera cały czas skrypt będzie traktował jako POWRACAJĄCY.
Po 7 dniach ciacho wygaśnie i user jak wróci to bę dzie jako nowy.

GTM wtedy najpierw wykonuje ten kod a potem opiera się na ciasteczku returningUser






1:56
czyli dwa ciacha:
returningUserSession - string przyjmujący wartość null dla pierwszego razu a potem ciastko esky_TCSIs
returningUser - bool





function checkUserStatus() {
    var returningUserTimestampKey = 'returningUserTimestamp';
    var sevenDaysInMilliseconds = 7 * 24 * 60 * 60 * 1000;
    var currentTime = new Date().getTime();

    var storedTimestamp = localStorage.getItem(returningUserTimestampKey);

    if (!storedTimestamp) {
        localStorage.setItem(returningUserTimestampKey, currentTime);
        console.log('New user');
        return 'new';
    }

    if (currentTime - parseInt(storedTimestamp, 10) > sevenDaysInMilliseconds) {
        localStorage.setItem(returningUserTimestampKey, currentTime);
        console.log('New user (after 7 days)');
        return 'new';
    } else {
        localStorage.setItem(returningUserTimestampKey, currentTime);
        console.log('Returning user');
        return 'returning';
    }
}






v4

(function () {
    var returningUserTimestampKey = 'returningUserTimestamp'; 
    var sevenDaysInMilliseconds = 7 * 24 * 60 * 60 * 1000; 
    var currentTime = new Date().getTime(); 

  
    var storedTimestamp = localStorage.getItem(returningUserTimestampKey);

  
    if (storedTimestamp === null || currentTime - parseInt(storedTimestamp, 10) > sevenDaysInMilliseconds) {
        localStorage.setItem(returningUserTimestampKey, currentTime); 
        console.log('New user detected: returningUser = false');
        return false; 
    } else {

        localStorage.setItem(returningUserTimestampKey, currentTime);
        console.log('Returning user detected: returningUser = true');
        return true; 
    }
})();



v3

(function () {
    var returningUserSessionKey = 'returningUserSession';
    var returningUserTimestampKey = 'returningUserTimestamp'; 
    var currentSession = window.esky_TCSIs; 
    var sevenDaysInMilliseconds = 7 * 24 * 60 * 60 * 1000; 
    var currentTime = new Date().getTime(); 

 
    if (!currentSession) {
        console.error('esky_TCSIs is not defined. Script execution stopped.');
        return false;
    }


    var storedSession = localStorage.getItem(returningUserSessionKey);
    var storedTimestamp = localStorage.getItem(returningUserTimestampKey);


    storedTimestamp = storedTimestamp ? parseInt(storedTimestamp, 10) : null;


    if (
        storedTimestamp === null || 
        storedSession === null || 
        currentTime - storedTimestamp > sevenDaysInMilliseconds 
    ) {
  
        localStorage.setItem(returningUserSessionKey, currentSession);
        localStorage.setItem(returningUserTimestampKey, currentTime);
        console.log('New user detected.');
        return false; 
    } else if (storedSession !== currentSession) {
       
        localStorage.setItem(returningUserTimestampKey, currentTime); 
        console.log('Returning user detected.');
        return true; 
    } else {
   
        localStorage.setItem(returningUserTimestampKey, currentTime); 
        console.log('Same session detected. User treated as new.');
        return false; 
    }
})();



v2

(function () {
    var returningUserSessionKey = 'returningUserSession'; 
    var returningUserTimestampKey = 'returningUserTimestamp'; 
    var currentSession = window.esky_TCSIs; 
    var sevenDaysInMilliseconds = 7 * 24 * 60 * 60 * 1000; 
    var currentTime = new Date().getTime(); 

 
    if (!currentSession) {
        console.error('esky_TCSIs is not defined. Script execution stopped.');
        return false;
    }

  
    var storedSession = localStorage.getItem(returningUserSessionKey);
    var storedTimestamp = localStorage.getItem(returningUserTimestampKey);


    if (
        storedTimestamp === null || 
        storedSession === null || 
        currentTime - parseInt(storedTimestamp, 10) > sevenDaysInMilliseconds 
    ) {
        
        localStorage.setItem(returningUserSessionKey, currentSession);
        localStorage.setItem(returningUserTimestampKey, currentTime);
        return false; 
    } else if (storedSession !== currentSession) {
       
        localStorage.setItem(returningUserTimestampKey, currentTime); 
        return true; 
    } else {
     
        localStorage.setItem(returningUserTimestampKey, currentTime);
        return false; 
    }
})();





(function () {
    var returningUserKey = 'returningUser'; // Ключ для збереження в localStorage
    var currentSessionKey = 'esky_TCSIs';  // Ключ для ідентифікації сесії

    // Отримуємо значення поточної сесії
    var currentSession = window[currentSessionKey] || null;

    // Якщо currentSession недоступний, зупиняємо виконання
    if (!currentSession) {
        console.warn('Session key "esky_TCSIs" is missing. Script execution stopped.');
        return;
    }

    // Отримуємо збережене значення returningUser з localStorage
    var storedReturningUser = localStorage.getItem(returningUserKey);

    // Перевірка стану користувача
    if (storedReturningUser === null) {
        // Якщо значення returningUser ще не існує, користувач вважається новим
        dataLayer.push({
            event: 'userStatus',
            userType: 'NEW' // Позначаємо користувача як нового
        });

        // Зберігаємо поточну сесію як returningUser
        localStorage.setItem(returningUserKey, currentSession);
    } else if (storedReturningUser !== currentSession) {
        // Якщо returningUser існує, але не збігається з поточною сесією, користувач повертається
        dataLayer.push({
            event: 'userStatus',
            userType: 'RETURNING' // Позначаємо користувача як повертаючого
        });

        // Не оновлюємо returningUser, щоб зберегти статус "повертаючий"
    } else {
        // Якщо returningUser збігається з поточною сесією, це новий перехід у поточній сесії
        dataLayer.push({
            event: 'userStatus',
            userType: 'NEW' // Позначаємо користувача як нового у цій сесії
        });

        // Оновлюємо returningUser (необов'язково, бо значення збігаються)
        localStorage.setItem(returningUserKey, currentSession);
    }
})();
IF returningUserSession is null or returningUserSession = esky_TCSIs 
THEN returningUserSession = esky_TCSIs 
AND returningUser = false

ELSE returningUser = true



v5
(function () {
    var viewItemCounterKey = 'viewItemCounter';

    if (sessionStorage.getItem(viewItemCounterKey) === null) {
        sessionStorage.setItem(viewItemCounterKey, 0);
    }

    if (window._hasProcessedViewItemEvent) {
        return; 
    }

    window._hasProcessedViewItemEvent = true; 

    
    var processedItemIds = new Set();

    function incrementViewItemCounter() {
        var currentCount = parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
        sessionStorage.setItem(viewItemCounterKey, currentCount + 1);
    }

    function processEvent(event) {
        if (
            event.event === 'view_item' &&
            event.ecommerce &&
            Array.isArray(event.ecommerce.items)
        ) {
            event.ecommerce.items.forEach(function (item) {
                if (item.item_id && !processedItemIds.has(item.item_id)) {
                    incrementViewItemCounter();
                    processedItemIds.add(item.item_id); 
                }
            });
        }
    }

    function processViewItemEvents() {
        if (window.dataLayer) {
   
            window.dataLayer.forEach(function (event) {
                processEvent(event);
            });


            if (!window.dataLayer._isPushWrapped) {
                var originalPush = window.dataLayer.push;

                window.dataLayer.push = function () {
                    Array.prototype.forEach.call(arguments, function (event) {
                        processEvent(event);
                    });
                    return originalPush.apply(this, arguments);
                };

                window.dataLayer._isPushWrapped = true;
            }
        }
    }


    processViewItemEvents();


    window.getViewItemCount = function () {
        return parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
    };
})();




v4

(function () {
    var viewItemCounterKey = 'viewItemCounter';

    if (sessionStorage.getItem(viewItemCounterKey) === null) {
        sessionStorage.setItem(viewItemCounterKey, 0);
    }


    if (window._hasProcessedViewItemEvent) {
        return; 
    }

    window._hasProcessedViewItemEvent = true; 

    function incrementViewItemCounter() {
        var currentCount = parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
        sessionStorage.setItem(viewItemCounterKey, currentCount + 1);
    }

    function processViewItemEvents() {
        if (window.dataLayer) {
           
            window.dataLayer._processedEvents = window.dataLayer._processedEvents || new WeakSet();

           
            window.dataLayer.forEach(function (event) {
                if (event.event === 'view_item' && !window.dataLayer._processedEvents.has(event)) {
                    incrementViewItemCounter();
                    window.dataLayer._processedEvents.add(event);
                }
            });

         
            if (!window.dataLayer._isPushWrapped) {
                var originalPush = window.dataLayer.push;

                window.dataLayer.push = function () {
                    Array.prototype.forEach.call(arguments, function (event) {
                        if (event.event === 'view_item' && !window.dataLayer._processedEvents.has(event)) {
                            incrementViewItemCounter();
                            window.dataLayer._processedEvents.add(event);
                        }
                    });
                    return originalPush.apply(this, arguments);
                };

                window.dataLayer._isPushWrapped = true;
            }
        }
    }


    processViewItemEvents();


    window.getViewItemCount = function () {
        return parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
    };
})();





v3
<script>
(function () {
    var viewItemCounterKey = 'viewItemCounter';

    if (sessionStorage.getItem(viewItemCounterKey) === null) {
        sessionStorage.setItem(viewItemCounterKey, 0);
    }

    function incrementViewItemCounter() {
        var currentCount = parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
        sessionStorage.setItem(viewItemCounterKey, currentCount + 1);
    }

    function checkViewItemEvent() {
        if (window.dataLayer) {

            window.dataLayer._processedEvents = window.dataLayer._processedEvents || new WeakSet();


            window.dataLayer.forEach(function (event) {
                if (event.event === 'view_item' && !window.dataLayer._processedEvents.has(event)) {
                    incrementViewItemCounter();
                    window.dataLayer._processedEvents.add(event); 
                }
            });


            if (!window.dataLayer._isPushWrapped) {
                var originalPush = window.dataLayer.push;

                window.dataLayer.push = function () {
                    Array.prototype.forEach.call(arguments, function (event) {
                        if (event.event === 'view_item' && !window.dataLayer._processedEvents.has(event)) {
                            incrementViewItemCounter();
                            window.dataLayer._processedEvents.add(event); 
                        }
                    });
                    return originalPush.apply(this, arguments);
                };


                window.dataLayer._isPushWrapped = true;
            }
        }
    }


    checkViewItemEvent();


    window.getViewItemCount = function () {
        return parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
    };
})();
</script>






v2 cHTML - Track View Item Counter

(function () {
    var viewItemCounterKey = 'viewItemCounter';

    // Ініціалізація значення в sessionStorage
    if (sessionStorage.getItem(viewItemCounterKey) === null) {
        sessionStorage.setItem(viewItemCounterKey, 0);
    }

    function incrementViewItemCounter() {
        var currentCount = parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
        sessionStorage.setItem(viewItemCounterKey, currentCount + 1);
    }

    function checkViewItemEvent() {
        if (window.dataLayer) {
            // Перевіряємо наявність події view_item
            var hasViewItem = window.dataLayer.some(function (event) {
                return event.event === 'view_item';
            });

            // Якщо подія знайдена, інкрементуємо лічильник
            if (hasViewItem) {
                incrementViewItemCounter();
            }

            // Додаємо спостерігач для нових подій
            var originalPush = window.dataLayer.push;
            window.dataLayer.push = function () {
                Array.prototype.forEach.call(arguments, function (event) {
                    if (event.event === 'view_item') {
                        incrementViewItemCounter();
                    }
                });
                return originalPush.apply(this, arguments);
            };
        }
    }

    // Ініціалізація функції
    checkViewItemEvent();

    // Створення функції для доступу до лічильника
    window.getViewItemCount = function () {
        return parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
    };
})();











cHTML - Track View Item Counter
v1
<script>
(function() {
    var viewItemCounterKey = 'viewItemCounter';

    if (sessionStorage.getItem(viewItemCounterKey) === null) {
        sessionStorage.setItem(viewItemCounterKey, 0);
    }

    function incrementViewItemCounter() {
        var currentCount = parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
        var newCount = currentCount + 1;
        sessionStorage.setItem(viewItemCounterKey, newCount); 
    }

    var hasViewItemEvent = false;  

    window.dataLayer.push(function() {

        if (!hasViewItemEvent) {
            if (window.dataLayer.some(function(event) { return event.event === 'view_item'; })) {
                incrementViewItemCounter();
                hasViewItemEvent = true;  
            }
        }
    });

    window.getViewItemCount = function() {
        return parseInt(sessionStorage.getItem(viewItemCounterKey), 10);
    };
})();
</script>

function() {
    return window.getViewItemCount ? window.getViewItemCount() : 0;
}



cHTML - Visitor Counter 7 days

<script>
(function() {

    function setCookie(name, value, days) {
        var date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        var expires = "expires=" + date.toUTCString();
        document.cookie = name + "=" + value + "; " + expires + "; path=/";
    }


    function getCookie(name) {
        var nameEQ = name + "=";
        var cookies = document.cookie.split(';');
        for (var i = 0; i < cookies.length; i++) {
            var c = cookies[i].trim();
            if (c.indexOf(nameEQ) === 0) {
                return c.substring(nameEQ.length, c.length);
            }
        }
        return null;
    }


    function isReturningUser() {
        var returningUser = getCookie('returningUser');
        if (!returningUser) {
            setCookie('returningUser', 'true', 7);
        }

        window.isReturningUser = !!returningUser;
    }


    isReturningUser();
})();
</script>


cJS - Returning User

function() {
    return window.isReturningUser || false;
}



DLV - price - view_item
ecommerce.items.0.price


cJS - trip nights
function(){

var text = document.querySelector("body > jan-app > esky-layout > div > esky-portfolio-variants > jan-basket > jan-portfolio-select-room > div.overview.overview-container > div > esky-hotel-summary-container > esky-hotel-price-summary > div > esky-hotel-travel-details > div > esky-icon-with-label:nth-child(1) > span").innerText;


var nights = text.match(/(\d+)\s+nights/)[1];

  
return nights
console.log(nights); 


}

