function notNull(e) {
    return e !== null;
}

function decodeURL(u) {
    try {
        return new Map(new URL(u).searchParams.entries())
    } catch {
        return new Map()
    }
}
// Collect impressions on current page
// Assumes that slots on given page have class="ad-slot". If not, this should be calibrated.
var impressions = Array.from(document.querySelectorAll('.ad-slot+* iframe')).filter(notNull).map(function(doc) {
    return doc.contentDocument.querySelector('a>img.img_ad')
}).filter(notNull).map(function(img) {
    return decodeURL(img.parentElement.href).get('adurl')
}).filter(notNull).map(decodeURL).map(function(url) {
    return {
        adEvent: url.get('g_ev'),
        adCampaign: url.get('g_cn')
    }
});
// Send data using Patalyst
if (typeof _eas !== 'undefined') {
    impressions.forEach(function(i) {
        _eas.push(['logEvent', ['Ad_Impression', 'FE', [
            ['AdEvent', i.adEvent, 'String'],
            ['AdCampaign', i.adCampaign, 'String']
        ]]])
    });
}
// Send data to GTM data layer
if (typeof dataLayer !== 'undefined') {
    impressions.forEach(function(i) {
        dataLayer.push({
            event: 'esky.adImpression',
            esky: {
                ad: {
                    event: i.adEvent,
                    campaign: i.adCampaign
                }
            }
        })
    });
}





function notNull(e){return e!==null;}
function decodeURL(u){try{return new Map(new URL(u).searchParams.entries())}catch{return new Map()}}
// Collect impressions on current page
// Assumes that slots on given page have class="ad-slot". If not, this should be calibrated.
var impressions = Array.from(document.querySelectorAll('.ad-slot+* iframe,iframe[id^=google_ads]')).filter(notNull).map(function(doc){return doc.contentDocument.querySelector('a>img.img_ad')}).filter(notNull).map(function(img){return decodeURL(img.parentElement.href).get('adurl')}).filter(notNull).map(decodeURL).map(function(url){return{adEvent:url.get('g_ev'),adCampaign:url.get('g_cn')}});
// Send data using Patalyst
if (typeof _eas !== 'undefined') {impressions.forEach(function(i){_eas.push(['logEvent',['Ad_Impression','FE',[['AdEvent',i.adEvent,'String'],['AdCampaign',i.adCampaign,'String']]]])});}
// Send data to GTM data layer
if (typeof dataLayer !== 'undefined') {impressions.forEach(function(i){dataLayer.push({event:'esky.adImpression',esky:{ad:{event:i.adEvent,campaign:i.adCampaign}}})});}



version with cookies

function notNull(e){ return e !== null; }
function decodeURL(u){
    try { return new Map(new URL(u).searchParams.entries()); } 
    catch { return new Map(); }
}

function setAdCookie(name, value, days = 30) {
    var date = new Date();
    date.setTime(date.getTime() + (days*24*60*60*1000));
    var expires = "expires=" + date.toUTCString();
    document.cookie = name + "=" + encodeURIComponent(value) + ";" + expires + ";path=/";
}

var impressions = Array.from(document.querySelectorAll('.ad-slot+* iframe, iframe[id^=google_ads]'))
  .filter(notNull)
  .map(function(iframe){
      try {
          return iframe.contentDocument.querySelector('a>img.img_ad');
      } catch(e) {
          return null; // якщо iframe недоступний через cross-origin
      }
  })
  .filter(notNull)
  .map(function(img){
      return decodeURL(img.parentElement.href).get('adurl');
  })
  .filter(notNull)
  .map(decodeURL)
  .map(function(url){
      return {adEvent: url.get('g_ev'), adCampaign: url.get('g_cn')};
  });

var seen = new Set();
impressions = impressions.filter(function(i){
    var key = i.adEvent + '|' + i.adCampaign;
    if(seen.has(key)) return false;
    seen.add(key);
    return true;
});

if (typeof _eas !== 'undefined') {
    impressions.forEach(function(i){
        _eas.push([
            'logEvent',
            ['Ad_Impression','FE',[
                ['AdEvent', i.adEvent, 'String'],
                ['AdCampaign', i.adCampaign, 'String']
            ]]
        ]);
    });
}

if (typeof dataLayer !== 'undefined') {
    impressions.forEach(function(i){
        dataLayer.push({
            event: 'esky.adImpression',
            esky: { ad: { event: i.adEvent, campaign: i.adCampaign } }
        });

        if (i.adCampaign && i.adCampaign.includes("LH")) {
            var cookieName = "ad_campaign";  
            var cookieValue = i.adCampaign;  
            setAdCookie(cookieName, cookieValue, 30);
        }
    });
}

v2 cookies ES5

function notNull(e){return e!==null;}
function decodeURL(u){
    try{
        var params={};
        var parser=document.createElement('a');
        parser.href=u;
        var query=parser.search.substring(1);
        var vars=query.split('&');
        for(var i=0;i<vars.length;i++){
            var pair=vars[i].split('=');
            if(pair[0]) params[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]||'');
        }
        return params;
    }catch(e){return {};}
}
function setAdCookie(name,value,days){
    days=days||30;
    var date=new Date();
    date.setTime(date.getTime()+(days*24*60*60*1000));
    var hostname=window.location.hostname.split('.').slice(-2).join('.');
    document.cookie=name+"="+encodeURIComponent(value)+";expires="+date.toUTCString()+";path=/;domain=."+hostname+";secure";
}
var iframes=document.querySelectorAll('.ad-slot+* iframe, iframe[id^=google_ads]');
var impressions=[];
for(var i=0;i<iframes.length;i++){
    var iframe=iframes[i];
    if(!iframe) continue;
    var img=null;
    try{img=iframe.contentDocument.querySelector('a>img.img_ad');}catch(e){}
    if(!img) continue;
    var adurl=decodeURL(img.parentElement.href)['adurl'];
    if(!adurl) continue;
    var urlParams=decodeURL(adurl);
    impressions.push({adEvent:urlParams['g_ev'],adCampaign:urlParams['g_cn']});
}
var seen={};
var uniqueImpressions=[];
for(var j=0;j<impressions.length;j++){
    var key=impressions[j].adEvent+"|"+impressions[j].adCampaign;
    if(!seen[key]){seen[key]=true;uniqueImpressions.push(impressions[j]);}
}
impressions=uniqueImpressions;
if(typeof _eas!=='undefined'){
    for(var k=0;k<impressions.length;k++){
        _eas.push(['logEvent',['Ad_Impression','FE',[['AdEvent',impressions[k].adEvent,'String'],['AdCampaign',impressions[k].adCampaign,'String']]]]);
    }
}
if(typeof dataLayer!=='undefined'){
    for(var m=0;m<impressions.length;m++){
        dataLayer.push({event:'esky.adImpression',esky:{ad:{event:impressions[m].adEvent,campaign:impressions[m].adCampaign}}});
        if(impressions[m].adCampaign && impressions[m].adCampaign.indexOf("LH")!==-1){
            setAdCookie("ad_campaign",impressions[m].adCampaign,30);
        }
    }
}


only event

function notNull(e){return e!==null;}
function decodeURL(u){
    try{
        var params={};
        var parser=document.createElement('a');
        parser.href=u;
        var query=parser.search.substring(1);
        var vars=query.split('&');
        for(var i=0;i<vars.length;i++){
            var pair=vars[i].split('=');
            if(pair[0]) params[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]||'');
        }
        return params;
    }catch(e){return {};}
}
var iframes=document.querySelectorAll('.ad-slot+* iframe, iframe[id^=google_ads]');
var impressions=[];
for(var i=0;i<iframes.length;i++){
    var iframe=iframes[i];
    if(!iframe) continue;
    var img=null;
    try{img=iframe.contentDocument.querySelector('a>img.img_ad');}catch(e){}
    if(!img) continue;
    var adurl=decodeURL(img.parentElement.href)['adurl'];
    if(!adurl) continue;
    var urlParams=decodeURL(adurl);
    impressions.push({adEvent:urlParams['g_ev'],adCampaign:urlParams['g_cn']});
}
var seen={};
var uniqueImpressions=[];
for(var j=0;j<impressions.length;j++){
    var key=impressions[j].adEvent+"|"+impressions[j].adCampaign;
    if(!seen[key]){seen[key]=true;uniqueImpressions.push(impressions[j]);}
}
impressions=uniqueImpressions;
if(typeof _eas!=='undefined'){
    for(var k=0;k<impressions.length;k++){
        _eas.push(['logEvent',['Ad_Impression','FE',[['AdEvent',impressions[k].adEvent,'String'],['AdCampaign',impressions[k].adCampaign,'String']]]]);
    }
}
if(typeof dataLayer!=='undefined'){
    for(var m=0;m<impressions.length;m++){
        dataLayer.push({
            event:'view_promotion',
            promotion:{
                adEvent:impressions[m].adEvent,
                adCampaign:impressions[m].adCampaign
            }
        });
    }
}


(function(){
    function notNull(e){return e!==null;}
    function decodeURL(u){
        try{
            var params={};
            var parser=document.createElement('a');
            parser.href=u;
            var query=parser.search.substring(1);
            var vars=query.split('&');
            for(var i=0;i<vars.length;i++){
                var pair=vars[i].split('=');
                if(pair[0]) params[decodeURIComponent(pair[0])]=decodeURIComponent(pair[1]||'');
            }
            return params;
        }catch(e){return {};}
    }
    var seen={};

    function processIframe(img){
        var adurl=decodeURL(img.parentElement.href)['adurl'];
        if(!adurl) return;
        var urlParams=decodeURL(adurl);
        var key=urlParams['g_ev']+"|"+urlParams['g_cn'];
        if(seen[key]) return;
        seen[key]=true;

        if(typeof _eas!=='undefined'){
            _eas.push(['logEvent',['Ad_Impression','FE',[['AdEvent',urlParams['g_ev'],'String'],['AdCampaign',urlParams['g_cn'],'String']]]]);
        }
        if(typeof dataLayer!=='undefined'){
            dataLayer.push({
                event:'view_promotion',
                promotion:{
                    adEvent:urlParams['g_ev'],
                    adCampaign:urlParams['g_cn']
                }
            });
        }
    }

    function checkIframes(){
        var iframes=document.querySelectorAll('.ad-slot+* iframe, iframe[id^=google_ads]');
        for(var i=0;i<iframes.length;i++){
            var iframe=iframes[i];
            if(!iframe) continue;
            var img=null;
            try{img=iframe.contentDocument.querySelector('a>img.img_ad');}catch(e){}
            if(!img) continue;
            processIframe(img);
        }
    }

    var observer=new MutationObserver(function(){
        checkIframes();
    });
    observer.observe(document.body,{childList:true,subtree:true});
    checkIframes();
})();
